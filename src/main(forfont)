use bevy::{prelude::*, window::WindowResolution};
use kayak_ui::{
    prelude::{widgets::*, *},
    CameraUIKayak,
};

fn startup(mut commands: Commands,
    mut font_mapping: ResMut<FontMapping>,
    asset_server: Res<AssetServer>,
) {
   
    // 2d camera
    let camera_entity = commands
        .spawn(Camera2dBundle::default())
        .insert(CameraUIKayak)
        .id();

    font_mapping.set_default(asset_server.load("ace_futurism.kttf"));

    let parent_id = None;

    let mut widget_context = KayakRootContext::new(camera_entity);
    widget_context.add_plugin(KayakWidgetsContextPlugin);

    rsx! {
        <KayakAppBundle>
            <TextWidgetBundle
                text={TextProps {
                    content: "Start".into(),
                    ..Default::default()
                }}
            />
        </KayakAppBundle>
    };
    commands.spawn((widget_context, EventDispatcher::default()));
}

pub fn main() {
    App::new()
        .insert_resource(ClearColor(Color::rgb(0., 0., 0.)))
        .add_plugins(
            DefaultPlugins
                .set(ImagePlugin::default_nearest())
                .set(WindowPlugin {
                    primary_window: Some(Window {
                        resolution: WindowResolution::new(800., 800.),
                        ..default()
                    }),
                    ..default()
                }),
        )
        .add_plugin(KayakContextPlugin)
        .add_plugin(KayakWidgets)
        .add_startup_system(startup)
        .run();
}
